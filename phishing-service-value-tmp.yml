---
# Source: my-app-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: abc-my-app-chart
  labels:
    helm.sh/chart: my-app-chart-0.1.0
    app.kubernetes.io/name: my-app-chart
    app.kubernetes.io/instance: abc
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: my-app-chart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: abc-my-app-chart-phish-config
  labels:
    helm.sh/chart: my-app-chart-0.1.0
    app.kubernetes.io/name: my-app-chart
    app.kubernetes.io/instance: abc
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  .env: |-
    AWS_ACCESS_KEY_ID=""
    AWS_SECRET_ACCESS_KEY=""
    AWS_REGION=""
    AWS_ENDPOINT=""
    AWS_BUCKET=""
    SHORT_LINK_SERVER=""
    SHORT_LINK_SECRET=""
  config.json: |-
    {
      "admin_server": {
        "listen_url": "0.0.0.0:3333",
        "use_tls": true,
        "cert_path": "gophish_admin.crt",
        "key_path": "gophish_admin.key"
      },
      "phish_server": {
        "listen_url": "0.0.0.0:80",
        "use_tls": false,
        "cert_path": "example.crt",
        "key_path": "example.key"
      },
      "db_name": "mysql",
      "db_path": ":@(mysql:3306)/gophish?charset=utf8&parseTime=True&loc=UTC",
      "migrations_prefix": "db/db_",
      "contact_address": "",
      "domain": "",
      "logging": {
        "filename": "./gophish.log",
        "level": "info"
      },
      "provider": [
        {
          "name": "textanywhere",
          "url" : "https://api.textanywhere.com/API/v1.0/REST"
        },
        {
          "name" : "freesms",
          "url": "https://admin.freesms.vn/services/send.php?"
        },
        {
          "name" : "skillspar",
          "url" : ":5000"
        },
        {
          "name" : "telegram",
          "url" : ""
        },
        {
          "name" : "whatsapp",
          "url" : ""
        }
      ],
      "qr_code": {
        "file_path": ""
      },
      "s3":{
        "aws_region": "",
        "aws_bucket": "",
        "cloud_font_url": ""
      },
      "skillspar_client": "",
      "evilginx_client": "",
      "evilginx_client1": "",
      "suffix_domain1": "",
      "evilginx_client2": "",
      "suffix_domain2": "",
      "attachment_server": ""
    }
---
# Source: my-app-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: abc-my-app-chart
  labels:
    helm.sh/chart: my-app-chart-0.1.0
    app.kubernetes.io/name: my-app-chart
    app.kubernetes.io/instance: abc
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports: # <-- Lặp qua danh sách các port
    - name: http
      port: 80
      targetPort: 5000
      protocol: TCP # <-- Lặp qua danh sách các port
    - name: admin
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: my-app-chart
    app.kubernetes.io/instance: abc
---
# Source: my-app-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: abc-my-app-chart
  labels:
    helm.sh/chart: my-app-chart-0.1.0
    app.kubernetes.io/name: my-app-chart
    app.kubernetes.io/instance: abc
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-app-chart
      app.kubernetes.io/instance: abc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-app-chart
        app.kubernetes.io/instance: abc
    spec:
      serviceAccountName: abc-my-app-chart
      securityContext:
        null
      containers:
        - name: my-app-chart
          securityContext:
            null
          image: "your-docker-registry/your-app-image:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
          env: # Biến môi trường bổ sung
            []
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            null
          volumeMounts: # Gán root context
            - name: abc-my-app-chart-config-json-volume
              mountPath: /opt/gophish/config.json
              subPath: config.json
              readOnly: true
            - name: abc-my-app-chart-config-json-volume
              mountPath: /opt/gophish/.env
              subPath: .env
              readOnly: true
            # --- Cấu hình mount các Persistent Volume Claims ---
      volumes: # Gán root context
        - name: abc-my-app-chart-config-json-volume
          configMap:
            name: abc-my-app-chart-phish-config
        # --- Định nghĩa các Volume cho Persistent Volume Claims ---
